name: CI/CD_Pipeline

on:
  push:
    branches: [main, release, development, develop2] # Branches que acionam o pipeline quando ocorre um push
  pull_request:
    branches: [main, release, development, develop2] # Branches que acionam o pipeline quando ocorre um pull request

jobs:
  preflight:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          echo "Validating commit messages..."
          REGEX="^((Merge.*)|(Revert.*)|((build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\(.*\))?!?: .*))"
          COMMIT_MSGS=$(git log --format=%B -n 1 HEAD)
          echo "$COMMIT_MSGS" | while read -r COMMIT_MSG; do
            if ! echo "$COMMIT_MSG" | grep -Eq "$REGEX"; then
              echo "Commit message does not follow the convention: $COMMIT_MSG"
              exit 1
            fi
          done

  build:
    runs-on: ubuntu-latest
    needs: preflight
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java and Gradle
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          gradle-version: '8.7'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        working-directory: ./A3

      - name: Configurar ambiente Android
        uses: android-actions/setup-android@v2

      - name: Atualizar Android SDK
        run: $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --update

      - name: Instalar Android SDK Build-Tools e aceitar licenças
        run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;34.0.0"

      - name: Aceitar licenças do Android SDK
        run: |
          mkdir -p $ANDROID_HOME/licenses
          echo -e "\n8933bad161af4178b1185d1a37fbf41ea5269c55" > $ANDROID_HOME/licenses/android-sdk-license

      - name: Aceitar todas as licenças do Android SDK
        run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

      - name: Run Gradle
        run: ./gradlew test
        working-directory: ./A3

  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14, 16]
        test: [unit, integration]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm run test:${{ matrix.test }}

  versions:
      if: github.ref == 'refs/heads/release' # Este trabalho é executado se a referência do GitHub for 'refs/heads/release'
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - name: Set up shell script permissions
          run: chmod +x ./A3_2024.1/generate_version.sh # Executa o comando para configurar as permissões do script shell
        - name: Generate version
          run: ./A3_2024.1/generate_version.sh true # Executa o script para gerar a versão
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
